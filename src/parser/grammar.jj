/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.6";
  static = true;
}

PARSER_BEGIN(Parser)

package parser;
import rules.*;
public class Parser{
  
}

PARSER_END(Parser)

SKIP :
{
  < "%" (["a" - "z"] | ["A" - "z"] | ["0" - "9"]
  	| "-"  | " " | ":" | "/" | "." | "\\")* ("\n" | "\r" | "\r\n")>
| " "
| "\t"
| "\n"
}

TOKEN :
{
  < EQUAL : "==">
| < NEQUAL : "!=" >
| < LESS : "<" >
| < LESSEQUAL : "<=" >
| < GREATER : ">" >
| < GREATEREQUAL : ">=" >
| < ASSIGNMENT : ":=" >
}

TOKEN :
{
  < AFTER : "after" >
| < FORGET : "forget" >
| < NOT : "not" >
| < IF : "if" >
| < SEND : "send" >
| < CURRENT_HOST : "current_host">
| < SELF : "self" >
| < TRANSPORT : "transport">
| < PERSISTENT : "persistent">
| < INPUT : "input" >
| < CONSTANT : (["a"-"z"]) (["a"-"z"] | ["A"-"Z"] | <DIGIT> |"_")* >
| < VARIABLE : (["A"-"Z"] |"_") (["a"-"z"] | ["A"-"Z"] | <DIGIT> |"_")*>
| < NUM : (<DIGIT>)+>
| < #DIGIT : [ "0"-"9" ] >
}

Rule rule() :
{Rule rule;}
{
	LOOKAHEAD(2)
	rule = add__tran_rule() "."
	{
		return rule;
	}
|	rule = constantRule() "." 
	{
		return rule;  	
	}
| 	rule = del_rule() "."
	{	
		return rule;
	}
| 	rule = send_rule() "."
	{
		return rule;
	}	 	
|  rule = persistent() "."
	{  		return rule;
	}
|  rule = transport() "."
	{
  		return rule;
	}
| rule = input() "."
	{
	  return rule;	}
| <EOF>
	{
		return null;	
	}
}

Rule constantRule() :
{
 	Token  cons;}
{	cons = <CONSTANT>
	{
	  return new ConstantRule(null,null,cons);	}
}

Rule input() :
{
	Predicate head;  
}
{
	< INPUT >
	
	head = predicate()
	{
	  return new Input(head,null);
	}
}

Rule transport() :
{
	Predicate head;  
}
{
	< TRANSPORT >
	
	head = predicate()
	{
	  return new Transport(head,null);
	}
}

Rule persistent() :
{	Predicate head;  
}
{	< PERSISTENT >
	
	head = predicate()
	{
	  return new Persistent(head,null);	}
}

Rule add__tran_rule() :
{Predicate head;
 Literal_list body;
 boolean addrule = false;}
{
	head = predicate()
	(
	  < AFTER >	  {
	 	addrule = true;   	  }
	| <IF>  
	)
	body = literal_list()
	{		if(addrule)			return new AddRule(head,body);
		else
			return new TransientRule(head,body);
	}
}

Rule del_rule() :
{
  Predicate head;
  Literal_list body;
}
{
 	<FORGET>
 	head = predicate()
	<IF>
	body = literal_list()
	{
	  return new DeleteRule(head,body);	}	
}

Rule send_rule() :
{
  Predicate head;
  Literal_list body;
}
{
	<SEND>
	head = predicate()
	< AFTER >
	body = literal_list()
	{
	  return new SendRule(head,body);	}
}

Predicate predicate() :
{
  SimplePredicate predicate;
  Predicate finalPredicate;
}
{
	predicate = simple_predicate()
	finalPredicate = transport_part(predicate)
	{
	  return finalPredicate;	}
}

SimplePredicate simple_predicate() :
{Token name;
 Term_List arguments;
}
{
	name = < CONSTANT >
	"(" arguments = argument_list() ")"
    {
      Constant cons = new Constant(name);
      return new SimplePredicate(cons,arguments); 	}
}

Predicate transport_part(SimplePredicate simple) :
{Identifier src_dest;}
{
	( "@" src_dest = identifier()
	 {	   return new TransportPredicate(simple.getName(),simple.getTerms(),src_dest);	 }	)?
	{
	  return simple;	}
}

Term_List argument_list() :
{
 Term_List list;
 Term term;
}
{
	term = Term()
	list = argument_list_tail()
	{
	  list.addElement(term);
	  return list;	}
}

Term_List argument_list_tail() :
{Term_List list;}
{
	("," list = argument_list()
		{
		  return list;		}
	)?
	{
	  list = new Term_List();
	  return list;
	} 
}

Term Term() :
{
  Token output, left, right, oper;
  Term term;
}
{
	(
  	    output = <NUM>
  	    {
  	      return new Num(output);  	    }
  	|  <SELF>
  	{		return new Variable("Self_");
 	}
  	|	LOOKAHEAD(3) left = <VARIABLE> oper = operator() right = <VARIABLE>
		{
		  return new ArithmeticTerm(left,oper,right);
		}

	|	LOOKAHEAD(3) left = <VARIABLE> oper = operator() right = <NUM>
		{
		  return new ArithmeticTerm(left,oper,right);
		} 
  	|	LOOKAHEAD(2)
  		 term = identifier()
  		 {
  		   return term;  		 }
  	| LOOKAHEAD(2)	function()
  	|
		{			Function fun;
		}
  		"#" fun = function()
  		{
  	  		return new AgrFunction2(fun.getToken(),fun.getTerm_List());  		}
 	|LOOKAHEAD(2)
 		{
 		  Function internalFun;
 		}
 		"@" internalFun = function()
 		{
 		  return new InternalFunction(internalFun.getToken(),internalFun.getTerm_List()); 		}
	)
}

Function function() :
{
	Token name;
	Term_List arguments;
}
{
	name = <CONSTANT> "(" arguments = argument_list() ")"
	{
	  return new Function(name,arguments);	}
}
     
Literal_list literal_list() :
{
  Literal_list list;
  Literal literal;
}
{
	literal = literal()
	list = literal_list_tail()
	{
	  list.addElement(literal);
	  return list;	}
}

Literal_list literal_list_tail() :
{Literal_list list;}
{
 	(","
 	  list = literal_list()
 	  {
 	    return list; 	  }
 	)?

 	 {
 	   return new Literal_list();  	 }
}

Literal literal() :
{
  Predicate predicate;
  Expresion exp;
  Current_host host;
}
{
  	LOOKAHEAD(2)predicate = predicate()
	{
	  return new SimpleLiteral(predicate);	}
| 	<NOT> predicate = predicate()
	{
	  return new NegativeLiteral(predicate);	}
|	exp = expresion()
	{		return exp;
    }
|	host = current_host()	
	{		return host;
	}
}

Current_host current_host() : 
{
  Token token;
  Variable var;
}
{	<CURRENT_HOST> "("  token = <VARIABLE> ")"
	{
	  return new Current_host(new Variable(token)); 	}
	
}

Expresion expresion() :
{
  Term left, right;
  Token operator;
}
{
	left = operand()
	operator = operator()
	right = right_operand()
	{
	  return new Expresion(left,operator,right);	}
}

Term operand() :
{
  Token output, operator, left, right;
  Term iden;
  Function fun;
  Arithmetic exp;
}
{

 "@"  fun = function()
 {
	return new InternalFunctionWrapper(new InternalFunction(fun.getToken(),fun.getTerm_List()));
 }
 |  < SELF>
   {
     return new Variable("Self_");
   }
| output = <NUM>
  {
   return new Num(output);
  }
| iden = identifier()
 {
   return iden;
 }

}

Term right_operand() :{
  Token output, operator, right;
  Term iden;
  Function fun;
  Arithmetic exp;
}
{

 "@"  fun = function()
 {
	return new InternalFunctionWrapper(new InternalFunction(fun.getToken(),fun.getTerm_List()));
 }
|  < SELF >
   {
     return new Variable("Self_");
   }
|  iden = identifier() exp = arithmetic()
 {
   	if(exp == null){		return iden;
   	}else
		return new Arithmetic(((Identifier) iden).token, exp.operator, exp.rightPart);
 }
|  output = <NUM>
  {
   return new Num(output);
  }
}

Arithmetic arithmetic() :
{	Token left, operator, right;
}
{
 	( 	  operator = operator() right = < VARIABLE > 
	{
	  return new Arithmetic(operator, right);
	}
	)?
	{
	  return null;	}
}

Token operator() :
{Token output;}
{
  
 output = <EQUAL>
 {
   return output;
 }
| output = <NEQUAL>
 {
   return output;
 }
| output = "+"
 {
   return output;
 }
| output = "-"
 {
   return output;
 }
| output = "*"
 {
   return output;
 }
| output = "/"
 {
   return output;
 }
|  LOOKAHEAD(2) output = < LESS >
  {
   return output;
  }
| output = < LESSEQUAL >
 {
   return output;
 }
| output = < GREATER >
 {
   return output;
 }
| output = < GREATEREQUAL >
 {
   return output; }
| output = < ASSIGNMENT > {	return output;
 }
}

Identifier identifier() :
{
  Identifier output;
  Token token;
}
{  
	(
	   token = <VARIABLE>	    {
	      output = new Variable(token);
	      return output;
		}
	|  token = <CONSTANT>
		{
	      output = new Constant(token);
	      return output;
		}
	)
}
